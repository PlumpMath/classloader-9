plugins {
    id "org.sonarqube" version "2.2"
    id "org.ajoberstar.github-pages" version "1.6.0-rc.1"
    id "org.xbib.gradle.plugin.jbake" version "1.2.1"
}

group = 'org.xbib'
version = '2.0.0'

printf "Host: %s\nOS: %s %s %s\nJVM: %s %s %s %s\nGroovy: %s\nGradle: %s\n" +
        "Build: group: ${project.group} name: ${project.name} version: ${project.version}\n",
        InetAddress.getLocalHost(),
        System.getProperty("os.name"),
        System.getProperty("os.arch"),
        System.getProperty("os.version"),
        System.getProperty("java.version"),
        System.getProperty("java.vm.version"),
        System.getProperty("java.vm.vendor"),
        System.getProperty("java.vm.name"),
        GroovySystem.getVersion(),
        gradle.gradleVersion

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: "jacoco"

repositories {
    mavenCentral()
}

configurations {
    wagon
    testCompile.extendsFrom(provided)
}

dependencies {
    testCompile 'junit:junit:4.12'
    wagon 'org.apache.maven.wagon:wagon-ssh-external:2.10'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-profile" << "compact1"
}
test {
    classpath += configurations.provided
    testLogging {
        showStandardStreams = false
        exceptionFormat = 'full'
    }
}
// for jar sealed test
test.dependsOn(':jar')

jar {
    manifest {
        mainAttributes('Sealed': true)
        attributes("Class-Path": configurations.compile.collect { it.getName() }.join(' '))
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
}
artifacts {
    archives sourcesJar, javadocJar
}
if (project.hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }
}

apply from: "${rootProject.projectDir}/gradle/ext.gradle"
apply from: "${rootProject.projectDir}/gradle/publish.gradle"
apply from: "${rootProject.projectDir}/gradle/sonarqube.gradle"
